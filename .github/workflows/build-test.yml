name: Build and test

on: [push, pull_request, release]

jobs:
  build-ubuntu:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Get version
        id: version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          sudo apt-get install automake flex llvm-dev check lcov \
             libdw-dev libffi-dev
      - name: Generate configure script
        run: ./autogen.sh
      - name: Configure
        run: |
          mkdir build && cd build
          ../configure --enable-gcov --enable-asan \
               --with-llvm=/usr/bin/llvm-config --enable-debug
      - name: Build
        run: ASAN_OPTIONS=detect_leaks=0 make -C build
      - name: Test
        run: ASAN_OPTIONS=detect_leaks=0 make -C build check
      - name: JIT benchmarks
        run: |
          make -C build bin/jitperf
          ./build/bin/jitperf -L build/lib/ test/perf/simple.vhd
      - name: Coverage report
        run: make -C build cov-generate
      - name: Coveralls
        continue-on-error: true
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./build/coverage/nvc.info
      - name: Dist clean
        run: make -C build distclean
      - name: Configure for release
        run: |
          cd build
          ../configure --with-llvm=/usr/bin/llvm-config \
             --prefix=/opt/nvc-${{ env.VERSION }} \
             --disable-debug
      - name: Build release
        run: make -C build
      - name: Install release
        if: github.event_name != 'pull_request'
        run: sudo make -C build install
      - name: Archive
        if: github.event_name != 'pull_request'
        run: >-
          tar -czf nvc-${{ env.VERSION }}.tar.gz \
            /opt/nvc-${{ env.VERSION }}
      - name: 'Upload artifact'
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: 'Ubuntu binaries'
          path: nvc-${{ env.VERSION }}.tar.gz

  build-mac:
    name: Mac OS
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: brew install llvm check automake libffi
      - name: Generate configure script
        run: ./autogen.sh
      - name: Configure
        run: |
          mkdir build && cd build
          ../configure --with-llvm=$(brew --prefix llvm)/bin/llvm-config \
               --enable-debug
      - name: Build
        run: make -C build
      - name: Test
        run: make -C build check
      - name: Dist clean
        run: make -C build distclean
      - name: Configure for release
        run: |
          cd build
          ../configure --with-llvm=$(brew --prefix llvm)/bin/llvm-config \
               --disable-debug
      - name: Build release
        run: make -C build

  build-windows-msys2:
    name: Windows MSYS2 MINGW64
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }
          - { sys: clang64, env: clang-x86_64 }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            base-devel
            mingw-w64-${{matrix.env}}-llvm
            mingw-w64-${{matrix.env}}-check
            mingw-w64-${{matrix.env}}-ncurses
            mingw-w64-${{matrix.env}}-libffi
            mingw-w64-${{matrix.env}}-pkg-config
            mingw-w64-${{matrix.env}}-cc
            unzip
            git
            autoconf
            automake-wrapper
      - name: Generate configure script
        run: bash autogen.sh
      - name: Configure
        run: |
          mkdir build
          cd build
          bash ../configure --enable-debug
      - name: Build
        run: make -C build
      - name: Test
        run: make -C build check
      - name: Dist clean
        run: make -C build distclean
      - name: Configure for release
        run: |
          cd build
          ../configure --disable-debug
      - name: Build release
        run: make -C build
      - name: Install release
        run: make -C build install
      - name: Install OSVVM
        run: nvc --install osvvm
      - name: Install UVVM
        run: nvc --install uvvm

  pkg-windows-msys2:
    name: Package for Windows MSYS2
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }
          - { sys: clang64, env: clang-x86_64 }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            base-devel
            git
      - name: Build MSYS2 ${{matrix.sys}} package
        run: |
          cd contrib/msys2
          makepkg-mingw -sCLf
          pacman -Qlp *.zst
          echo "MSYS2_PKG=$(ls *.zst)" >> $GITHUB_ENV
      - name: Install package
        run: pacman -U --noconfirm contrib/msys2/*.zst
      - name: Install OSVVM
        run: nvc --install osvvm
      - name: Install UVVM
        run: nvc --install uvvm
      - name: 'Upload artifact'
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: 'MSYS2 ${{matrix.sys}} package'
          path: contrib/msys2/${{ env.MSYS2_PKG }}

  vests:
    name: VESTs
    if: github.event_name != 'pull_request'
    needs: [ build-ubuntu ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/checkout@v3
        with:
          repository: nickg/vests
          path: vests
          fetch-depth: 1
      - name: Install dependencies
        run: sudo apt-get install ruby ruby-colorize llvm libdw1
      - uses: actions/download-artifact@v3
        with:
          name: 'Ubuntu binaries'
      - name: Extract pre-built binary
        run: >-
          sudo tar -C / -zxvf nvc-*.tar.gz
      - name: Add to PATH
        run: >-
          echo /opt/nvc-*/bin >> $GITHUB_PATH
      - name: Check --version output
        run: nvc --version
      - name: Run VESTs
        run: >-
          cd vests && ../test/run_vests.rb .

  projects:
    name: External Projects
    if: github.event_name != 'pull_request'
    needs: [ build-ubuntu ]
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/checkout@v3
        with:
          repository: nickg/vhdl-projects
          path: vhdl-projects
          fetch-depth: 1
      - name: Install dependencies
        run: sudo apt-get install llvm libdw1
      - uses: actions/download-artifact@v3
        with:
          name: 'Ubuntu binaries'
      - name: Extract pre-built binary
        run: >-
          sudo tar -C / -zxvf nvc-*.tar.gz
      - name: Add to PATH
        run: >-
          echo /opt/nvc-*/bin >> $GITHUB_PATH
      - name: Check --version output
        run: nvc --version
      - name: Install OSVVM
        run: nvc --install osvvm
      - name: Install UVVM
        run: nvc --install uvvm
      - name: Test FPHDL
        run: ./vhdl-projects/fphdl/test.sh
      - name: Test ZPU
        run: ./vhdl-projects/zpu/test.sh
      - name: Test Flopoco
        run: ./vhdl-projects/flopoco/test.sh
      - name: Test HardH264
        run: ./vhdl-projects/hardh264/test.sh
      - name: Test J-Core
        run: ./vhdl-projects/jcore/test.sh
      - name: Test Dummy_Plug
        run: ./vhdl-projects/dummyplug/test.sh
      - name: Test OpenRIO
        run: ./vhdl-projects/openrio/test.sh
      - name: Test SPI-FPGA
        run: ./vhdl-projects/spi-fpga/test.sh
      - name: Test JSON-for-VHDL
        run: ./vhdl-projects/json/test.sh
      - name: Test OSVVM
        run: ./vhdl-projects/osvvm/test.sh
      - name: Test UVVM
        run: ./vhdl-projects/uvvm/test.sh
      - name: Test vhdl-format
        run: ./vhdl-projects/format/test.sh
      - name: Test NEORV32
        run: ./vhdl-projects/neorv32/test.sh

  vunit:
    name: VUnit
    if: github.event_name != 'pull_request'
    needs: [ build-ubuntu ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/checkout@v3
        with:
          repository: nickg/vunit
          ref: nvc
          path: vunit
          submodules: recursive
          fetch-depth: 1
      - name: Install dependencies
        run: sudo apt-get install python3 python3-colorama
      - uses: actions/download-artifact@v3
        with:
          name: 'Ubuntu binaries'
      - name: Extract pre-built binary
        run: >-
          sudo tar -C / -zxvf nvc-*.tar.gz
      - name: Add to PATH
        run: >-
          echo /opt/nvc-*/bin >> $GITHUB_PATH
      - name: Check --version output
        run: nvc --version
      - name: Run uart example
        run: |
          export VUNIT_SIMULATOR=nvc
          export PYTHONPATH=$(pwd)/vunit
          cd vunit/examples/vhdl/uart
          python3 run.py
      - name: Run axi_dma example
        run: |
          export VUNIT_SIMULATOR=nvc
          export PYTHONPATH=$(pwd)/vunit
          cd vunit/examples/vhdl/axi_dma
          python3 run.py
